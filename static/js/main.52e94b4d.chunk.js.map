{"version":3,"sources":["Block.jsx","Row.jsx","Board.jsx","App.js","serviceWorker.js","index.js"],"names":["Block","props","onClick","Row","className","children","Board","onPlay","e","player","state","currentTarget","innerHTML","nextTurn","setState","tiles","document","querySelectorAll","tile","map","item","forEach","pos","every","list","emp","console","log","winner","set","style","background","color","status","rePlay","this","display","Component","WebFont","load","google","families","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.52e94b4d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Block(props) {\n  return <span onClick={props.onClick}></span>;\n}\n","import React from \"react\";\n\nexport default function Row(props) {\n  return <div className=\"row\">{props.children}</div>;\n}\n","import React, { Component } from \"react\";\nimport Block from \"./Block\";\nimport Row from \"./Row\";\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      player: \"X\",\n      status: \"\",\n    };\n  }\n\n  onPlay = (e) => {\n    let player = this.state.player;\n\n    if (e.currentTarget.innerHTML === \"\") {\n      e.currentTarget.innerHTML = player;\n      let nextTurn = this.state.player === \"X\" ? \"O\" : \"X\";\n      this.setState({\n        player: nextTurn,\n      });\n    }\n\n    let tiles = document.querySelectorAll(\".row span\");\n\n    let tile = [...tiles].map((item) => item);\n\n    let combinations = [\n      [tile[0], tile[1], tile[2]],\n      [tile[3], tile[4], tile[5]],\n      [tile[6], tile[7], tile[8]],\n      [tile[0], tile[3], tile[6]],\n      [tile[1], tile[4], tile[7]],\n      [tile[2], tile[5], tile[8]],\n      [tile[0], tile[4], tile[8]],\n      [tile[2], tile[4], tile[6]],\n    ];\n\n    combinations.forEach((item) => {\n      let pos = item.every(\n        (list) => list.innerHTML === item[0].innerHTML && list.innerHTML !== \"\"\n      );\n\n      let emp = item.every((list) => list.innerHTML !== \"\");\n\n      console.log(emp);\n\n      if (pos === true) {\n        let winner = item[0].innerHTML;\n        // debugger;\n        item.forEach((set) => {\n          set.style.background = \"#faa800\";\n          set.style.color = \"#ffffff\";\n        });\n        this.setState({\n          status: winner,\n        });\n      }\n    });\n  };\n\n  rePlay = () => {\n    let tiles = document.querySelectorAll(\".row span\");\n    [...tiles].forEach((item) => {\n      item.innerHTML = \"\";\n      item.style.background = \"#2c343a\";\n      item.style.color = \"#969a9d\";\n    });\n    this.setState({\n      status: \"\",\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"boardWrapper\">\n        <h5 className=\"player-info\">{`Next Player: ${\n          this.state.player === \"X\" ? \"Your Turn\" : \"Opponents Turn\"\n        }`}</h5>\n        <Row>\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n        </Row>\n        <Row>\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n        </Row>\n        <Row>\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n          <Block onClick={this.onPlay} />\n        </Row>\n        <h5 className=\"status\">{`Winner: ${this.state.status}`}</h5>\n        <button\n          onClick={this.rePlay}\n          className=\"overlay\"\n          style={{ display: this.state.status ? \"flex\" : \"none\" }}\n        >\n          <span>Restart</span>\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\nimport WebFont from \"webfontloader\";\nWebFont.load({\n  google: {\n    families: [\"Roboto\", \"sans-serif\", \"Fredoka One\", \"cursive\"],\n  },\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"boardContainer\">\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}